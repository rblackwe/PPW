[% WRAPPER ui title = "Maintaining Code While Staying Sane" %]
[% PROCESS _conf/main %]

<h1>[% page.title %]</h1>

<h2>A one-day course on code maintenance.</h2>

<p>The Pittsburgh Perl Workshop is happy to announce "[% site.peter_scott_name %]," 
a special course for programmers faced with the task of managing legacy
code, to be taught by returning PPW speaker, Peter Scott.</p>

<p>There is an additional registration fee to take this course. Please be sure
to select the "[% site.peter_scott_name %]" option when registering. Seating in this
course is limited.</p>

<h2>About the course.</h2>

<p>Have you inherited a hideous lump of code that would need an exorcism before
you could get it to run under 'use strict'? If you've acquired Perl code
written by someone else, or even if your own code is giving you problems, this
tutorial is for you. Based in part on Scott's book Perl Medic: Transforming
Legacy Code (Addison-Wesley, 2004), it provides first aid for the ailing
program that just landed in your lap.  Don't be the victim of someone else's
poor programming skills - be the hero by tackling and taming the legacy code
beast!</p>

<p>Perl is easy to start using. But sometimes being easy can get you into trouble.
The many ways to program in Perl mean that Perl code can often be cryptic,
obscure, or muddled; just because a program runs doesn't mean it's
maintainable. Hordes of programmers have acquired just enough Perl knowledge to
get a program to run, and then one day, you find yourself tasked with
maintaining one of those programs, and the horror begins.</p>

<p>This tutorial is designed to help you deal with that horror. You'll learn how
to:</p>

<ul>
    <li> Retrofit tests and profiling onto legacy code</li>
    <li> Get bad code to conform to best practices</li>
    <li> Make code warnings- and strict- compliant</li>
    <li> Recognize different Perl styles and deal with them</li>
    <li> Use tools to detect and remove duplication</li>
    <li> Make sense of code messes</li>
    <li> Understand and edit code at micro and macro levels</li>
    <li> Deal with political and interpersonal issues of code inheritance</li>
    <li> Make your own code more maintainable</li>
</ul>


<p>Target audience: beginning through intermediate Perl programmers.</p>

<h2>About the instructor.</h2> 

<p>Peter Scott is a Perl trainer and the author of "Perl Medic"
(Addison-Wesley, 2004) and "Perl Debugged" (Addison-Wesley, 2001).  He's taught
Perl for top institutions and also at OSCON, YAPC, and on the Perl Whirl
cruise.  He's a book reviewer for The Perl Review and perpetrated the recent
spoof review of "The Geek's Guide to Surviving a Recession" that appears to
have taken in far too many readers.  He lives in the Pacific Northwest and
undertakes enterprise architecture and infrastructure using Perl at every
chance.  This year he is on the Perl Track committee for OSCON, and he was a
keynote speaker at the PPW in 2006.</p>

[% END %]
